// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: multiplication/v1/service.proto

package multiplicationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiplicationService_Multiply_FullMethodName = "/multiplication.v1.MultiplicationService/Multiply"
)

// MultiplicationServiceClient is the client API for MultiplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplicationServiceClient interface {
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error)
}

type multiplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplicationServiceClient(cc grpc.ClientConnInterface) MultiplicationServiceClient {
	return &multiplicationServiceClient{cc}
}

func (c *multiplicationServiceClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error) {
	out := new(MultiplyResponse)
	err := c.cc.Invoke(ctx, MultiplicationService_Multiply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiplicationServiceServer is the server API for MultiplicationService service.
// All implementations should embed UnimplementedMultiplicationServiceServer
// for forward compatibility
type MultiplicationServiceServer interface {
	Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error)
}

// UnimplementedMultiplicationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMultiplicationServiceServer struct {
}

func (UnimplementedMultiplicationServiceServer) Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}

// UnsafeMultiplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplicationServiceServer will
// result in compilation errors.
type UnsafeMultiplicationServiceServer interface {
	mustEmbedUnimplementedMultiplicationServiceServer()
}

func RegisterMultiplicationServiceServer(s grpc.ServiceRegistrar, srv MultiplicationServiceServer) {
	s.RegisterService(&MultiplicationService_ServiceDesc, srv)
}

func _MultiplicationService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplicationServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiplicationService_Multiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplicationServiceServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiplicationService_ServiceDesc is the grpc.ServiceDesc for MultiplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplication.v1.MultiplicationService",
	HandlerType: (*MultiplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _MultiplicationService_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiplication/v1/service.proto",
}
